---
// pages/resources.astro
import Layout from '~/layouts/PageLayout.astro';

const metadata = {
  title: 'Resources',
};

const filterOptions = ['Sample Roleplay', 'Practice Test', 'Quizlet', 'Other'];
const tabOptions = ['Business Admin', 'Entrepreneurship', 'Finance', 'Hospitality & Tourism', 'Marketing', 'Personal Financial Literacy'];
const tabColors = ['text-business-management', 'text-entrepreneurship', 'text-finance', 'text-hospitality-tourism', 'text-marketing', 'text-personal-financial-literacy'];
---

<Layout metadata={metadata}>
  <!-- Hero Section -->
  <section class="text-center py-12 md:py-16 bg-blue-50">
    <div class="inline-block relative">
      <h1 class="text-4xl md:text-5xl font-bold bg-gradient-title from-blue-800 to-blue-400 bg-clip-text text-transparent mb-1">
        Resources
      </h1>
    </div>
    <h2 class="text-lg md:text-xl text-gray-600 max-w-md md:max-w-2xl mx-auto mt-4 leading-relaxed">
      Find sample roleplays, practice tests, quizlets, and more!
    </h2>
  </section>

  <!-- Resource Filter System -->
  <div class="flex flex-col md:flex-row p-4 space-y-4 md:space-y-0" id="resourceFilterSystem">
    <div class="md:w-1/4 w-full p-4 rounded-lg">
      <!-- View toggle -->
      <div class="flex text-sm mb-6">
        <button id="listViewBtn" class="px-3 py-1 bg-black text-white rounded-l-md">List</button>
        <button id="blockViewBtn" class="px-3 py-1 bg-gray-300 rounded-r-md">Block</button>
      </div>

      <!-- Filter checkboxes -->
      <h3 class="font-semibold mb-3">Resource Type</h3>
      {filterOptions.map(filter => (
        <div class="flex items-center mb-2">
          <input
            type="checkbox"
            id={filter}
            name="filter"
            value={filter}
            class="form-checkbox h-5 w-5 text-blue-600 rounded"
          />
          <label for={filter} class="ml-2 text-gray-700">{filter}</label>
        </div>
      ))}
    </div>

    <!-- Main content area -->
    <div class="md:w-3/4 w-full ml-0 md:ml-4">
      <!-- Tab selection -->
      <div class="flex flex-wrap justify-center md:justify-start mb-4 border-b" id="tabContainer">
        {tabOptions.map((tab, index) => (
          <button
            class={`px-4 py-2 font-semibold transition-all duration-300 tab-button border-b-2 border-transparent ${tabColors[index]} ${tab === 'Business Admin' ? 'border-current' : ''}`}
            data-tab={tab}
            data-color={tabColors[index]}
          >
            {tab}
          </button>
        ))}
      </div>

      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl bg-gradient-title font-bold"></h2>
      </div>

      <!-- Resource list -->
      <div id="resourceList" class="space-y-2">
        <!-- Resources will be populated here by JavaScript -->
        <div class="text-center text-gray-500">Loading resources...</div>
      </div>
    </div>
  </div>
</Layout>

<script>
  function initializeResourcePage() {
    let filteredResources = [];
    let selectedFilters = [];
    let selectedTab = 'Business Admin';
    let isBlockView = false;
    let resources = [];

    const resourceList = document.getElementById('resourceList');
    const tabContainer = document.getElementById('tabContainer');
    const listViewBtn = document.getElementById('listViewBtn');
    const blockViewBtn = document.getElementById('blockViewBtn');

    function getYearFromName(name) {
      const match = name.match(/\b(20\d{2})\b(?:\s*\(\d+\))?/);
      return match ? match[0] : '';
    }

    function getNameWithoutYear(name) {
      return name.replace(/\s*\b(20\d{2})\b(?:\s*\(\d+\))?/, '');
    }

    function updateResourceList() {
      if (!resourceList) {
        console.error('Resource list element not found');
        return;
      }
      resourceList.innerHTML = '';

      if (isBlockView) {
        resourceList.className = 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4';
      } else {
        resourceList.className = 'space-y-2';
      }

      if (filteredResources.length === 0) {
        const noResults = document.createElement('div');
        noResults.className = 'text-center text-gray-500 py-4';
        noResults.textContent = 'No resources found for the selected filters';
        resourceList.appendChild(noResults);
        return;
      }

      filteredResources.forEach(resource => {
        const div = document.createElement('div');
        const year = getYearFromName(resource.name);
        const nameWithoutYear = getNameWithoutYear(resource.name);
        
        if (isBlockView) {
          div.className = 'bg-gray-50 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 relative overflow-hidden';
          div.innerHTML = `
            <div class="absolute top-0 left-0 w-2 h-full ${getTabColor(resource.cluster)}"></div>
            <div class="p-4">
              <div class="w-12 h-12 mb-3 flex items-center justify-center bg-gray-200 rounded-full">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <a href="${resource.link}" target="_blank" rel="noopener noreferrer" class="block">
                <div class="text-black hover:text-blue-600 transition-colors font-medium">
                  ${nameWithoutYear}
                </div>
                <div class="text-sm text-gray-500 mt-1">
                  ${year}
                </div>
              </a>
            </div>
          `;
        } else {
          div.className = 'flex items-center p-2 bg-gray-50 hover:bg-gray-100 transition-colors duration-200 rounded relative overflow-hidden';
          div.innerHTML = `
            <div class="absolute top-0 left-0 w-2 h-full ${getTabColor(resource.cluster)}"></div>
            <a href="${resource.link}" target="_blank" rel="noopener noreferrer" class="flex-grow ml-4">
              <span class="text-sm">
                <span class="text-black hover:text-blue-600 transition-colors">${nameWithoutYear}</span>
                <span class="text-gray-500 ml-2">${year}</span>
              </span>
            </a>
          `;
        }
        resourceList.appendChild(div);
      });
    }

    function getTabColor(cluster) {
      const tabOptions = ['Business Admin', 'Entrepreneurship', 'Finance', 'Hospitality & Tourism', 'Marketing', 'Personal Financial Literacy'];
      const tabColors = ['bg-business-management', 'bg-entrepreneurship', 'bg-finance', 'bg-hospitality-tourism', 'bg-marketing', 'bg-personal-financial-literacy'];
      const index = tabOptions.indexOf(cluster);
      return index !== -1 ? tabColors[index] : 'bg-gray-500';
    }

    function applyFilters() {
      filteredResources = resources.filter(resource => {
        const typeMatch = selectedFilters.length === 0 || selectedFilters.includes(resource.type);
        const clusterMatch = resource.cluster === selectedTab;
        return typeMatch && clusterMatch;
      });
      updateResourceList();
    }

    function initializeEventListeners() {
      document.querySelectorAll('input[name="filter"]').forEach(checkbox => {
        checkbox.addEventListener('change', (e) => {
          if (e.target.checked) {
            selectedFilters.push(e.target.value);
          } else {
            selectedFilters = selectedFilters.filter(f => f !== e.target.value);
          }
          applyFilters();
        });
      });

      tabContainer?.addEventListener('click', (e) => {
        const button = e.target.closest('.tab-button');
        if (button) {
          selectedTab = button.dataset.tab;
          document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('border-current');
            btn.classList.add('border-transparent');
          });
          button.classList.remove('border-transparent');
          button.classList.add('border-current');
          applyFilters();
        }
      });

      listViewBtn?.addEventListener('click', () => {
        isBlockView = false;
        updateViewButtons();
        updateResourceList();
      });

      blockViewBtn?.addEventListener('click', () => {
        isBlockView = true;
        updateViewButtons();
        updateResourceList();
      });
    }

    function updateViewButtons() {
      if (isBlockView) {
        blockViewBtn?.classList.add('bg-black', 'text-white');
        blockViewBtn?.classList.remove('bg-gray-300', 'text-black');
        listViewBtn?.classList.remove('bg-black', 'text-white');
        listViewBtn?.classList.add('bg-gray-300', 'text-black');
      } else {
        listViewBtn?.classList.add('bg-black', 'text-white');
        listViewBtn?.classList.remove('bg-gray-300', 'text-black');
        blockViewBtn?.classList.remove('bg-black', 'text-white');
        blockViewBtn?.classList.add('bg-gray-300', 'text-black');
      }
    }

    // Fetch resources data
    fetch('/resources.json')
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        resources = Array.isArray(data.Sheet1) ? data.Sheet1 : [];
        filteredResources = resources.filter(resource => resource.cluster === 'Business Admin');
        initializeEventListeners();
        updateResourceList();
      })
      .catch(error => {
        console.error('Error fetching resources:', error);
        if (resourceList) {
          resourceList.innerHTML = '<div class="text-center text-red-500 py-4">Error loading resources. Please try again later.</div>';
        }
      });
  }

  // Run the initialization function when the DOM is ready
  document.addEventListener('DOMContentLoaded', initializeResourcePage);

  // Re-run the initialization when the page is loaded from the bfcache
  window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
      initializeResourcePage();
    }
  });

  // If you're using view transitions, you might also want to add this:
  document.addEventListener('astro:page-load', initializeResourcePage);
</script>
