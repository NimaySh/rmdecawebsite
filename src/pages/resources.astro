---
// pages/resources.astro
import Layout from '~/layouts/PageLayout.astro';
import resourcesData from 'data/resources.json';

// Access the array inside the "Sheet1" property
const resources = Array.isArray(resourcesData.Sheet1) ? resourcesData.Sheet1 : [];

const metadata = {
  title: 'Resources',
};

const filterOptions = ['Sample Roleplay', 'Practice Test', 'Quizlet', 'Other'];
const tabOptions = ['Business Admin', 'Entrepreneurship', 'Finance', 'Hospitality & Tourism', 'Marketing', 'Personal Financial Literacy'];
const tabColors = ['text-business-management', 'text-entrepreneurship', 'text-finance', 'text-hospitality-tourism', 'text-marketing', 'text-personal-financial-literacy'];
---

<Layout metadata={metadata}>
  <!-- Hero Section -->
  <section class="text-center py-16 bg-blue-50">
    <div class="inline-block relative">
      <h1 class="text-5xl font-bold bg-gradient-title from-blue-800 to-blue-400 bg-clip-text text-transparent mb-1">
        Resources
      </h1>
    </div>
    <h2 class="text-xl text-gray-600 max-w-2xl mx-auto mt-4 leading-relaxed">
      Find sample roleplays, practice tests, quizlets, and more!
    </h2>
  </section>

  <!-- Resource Filter System -->
  <div class="flex flex-col p-4" id="resourceFilterSystem">
    <div class="flex mb-4">
      <!-- Filter checkboxes -->
      <div class="w-1/4 bg-gray-100 p-4 rounded-lg">
        <h3 class="font-semibold mb-3">Resource Type</h3>
        {filterOptions.map(filter => (
          <div class="flex items-center mb-2">
            <input
              type="checkbox"
              id={filter}
              name="filter"
              value={filter}
              class="form-checkbox h-5 w-5 text-blue-600 rounded"
            />
            <label for={filter} class="ml-2 text-gray-700">{filter}</label>
          </div>
        ))}
      </div>

      <!-- Main content area -->
      <div class="w-3/4 ml-4">
        <!-- Tab selection -->
        <div class="flex mb-4 border-b" id="tabContainer">
          {tabOptions.map((tab, index) => (
            <button
              class={`px-4 py-2 font-semibold transition-all duration-300 tab-button border-b-2 border-transparent ${tabColors[index]}`}
              data-tab={tab}
              data-color={tabColors[index]}
            >
              {tab}
            </button>
          ))}
        </div>

        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl bg-gradient-title font-bold"></h2>
          <!-- View toggle -->
          <div class="flex text-sm">
            <button id="listViewBtn" class="px-3 py-1 bg-blue-500 text-white rounded-l-md">List</button>
            <button id="blockViewBtn" class="px-3 py-1 bg-gray-300 rounded-r-md">Block</button>
          </div>
        </div>

        <!-- Resource list -->
        <div id="resourceList" class="space-y-2">
          <!-- Resources will be populated here by JavaScript -->
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ resources, tabOptions, tabColors }}>
  let filteredResources = [...resources];
  let selectedFilters = [];
  let selectedTab = 'Business Admin';
  let isBlockView = false;

  function updateResourceList() {
    const resourceList = document.getElementById('resourceList');
    if (!resourceList) {
      console.error('Resource list element not found');
      return;
    }
    resourceList.innerHTML = '';

    if (isBlockView) {
      resourceList.classList.add('grid', 'grid-cols-3', 'gap-4');
      resourceList.classList.remove('space-y-2');
    } else {
      resourceList.classList.remove('grid', 'grid-cols-3', 'gap-4');
      resourceList.classList.add('space-y-2');
    }

    filteredResources.forEach(resource => {
      const div = document.createElement('div');
      if (isBlockView) {
        div.className = 'p-4 border rounded shadow-sm hover:shadow-md transition-shadow duration-200 relative overflow-hidden';
        div.innerHTML = `
          <div class="absolute top-0 left-0 w-1 h-full ${getTabColor(resource.cluster)}"></div>
          <a href="${resource.link}" target="_blank" rel="noopener noreferrer" class="block mt-2 text-black">${resource.name}</a>
        `;
      } else {
        div.className = 'flex items-center p-2 bg-gray-50 hover:bg-gray-100 transition-colors duration-200 rounded relative overflow-hidden';
        div.innerHTML = `
          <div class="absolute top-0 left-0 w-1 h-full ${getTabColor(resource.cluster)}"></div>
          <a href="${resource.link}" target="_blank" rel="noopener noreferrer" class="flex-grow ml-3 text-black">${resource.name}</a>
        `;
      }
      resourceList.appendChild(div);
    });
  }

  function getTabColor(cluster) {
    const index = tabOptions.indexOf(cluster);
    return index !== -1 ? tabColors[index].replace('text-', 'bg-') : 'bg-gray-500';
  }

  function applyFilters() {
    filteredResources = resources.filter(resource => {
      const typeMatch = selectedFilters.length === 0 || selectedFilters.includes(resource.type);
      const clusterMatch = resource.cluster === selectedTab;
      return typeMatch && clusterMatch;
    });
    updateResourceList();
  }

  function initializeEventListeners() {
    document.querySelectorAll('input[name="filter"]').forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        if (e.target.checked) {
          selectedFilters.push(e.target.value);
        } else {
          selectedFilters = selectedFilters.filter(f => f !== e.target.value);
        }
        applyFilters();
      });
    });

    const tabContainer = document.getElementById('tabContainer');
    if (!tabContainer) {
      console.error('Tab container not found');
      return;
    }

    tabContainer.addEventListener('click', (e) => {
      if (e.target.classList.contains('tab-button')) {
        selectedTab = e.target.dataset.tab;
        document.querySelectorAll('.tab-button').forEach(btn => {
          btn.classList.remove('border-current');
          btn.classList.add('border-transparent');
        });
        e.target.classList.remove('border-transparent');
        e.target.classList.add('border-current');
        applyFilters();
      }
    });

    // Set initial active tab
    const initialTab = document.querySelector('.tab-button[data-tab="Business Admin"]');
    if (initialTab) {
      initialTab.classList.remove('border-transparent');
      initialTab.classList.add('border-current');
    }

    // View toggle buttons
    document.getElementById('listViewBtn').addEventListener('click', () => {
      isBlockView = false;
      updateResourceList();
      document.getElementById('listViewBtn').classList.remove('bg-gray-300');
      document.getElementById('listViewBtn').classList.add('bg-blue-500', 'text-white');
      document.getElementById('blockViewBtn').classList.remove('bg-blue-500', 'text-white');
      document.getElementById('blockViewBtn').classList.add('bg-gray-300');
    });

    document.getElementById('blockViewBtn').addEventListener('click', () => {
      isBlockView = true;
      updateResourceList();
      document.getElementById('blockViewBtn').classList.remove('bg-gray-300');
      document.getElementById('blockViewBtn').classList.add('bg-blue-500', 'text-white');
      document.getElementById('listViewBtn').classList.remove('bg-blue-500', 'text-white');
      document.getElementById('listViewBtn').classList.add('bg-gray-300');
    });
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    initializeEventListeners();
    updateResourceList();
  });
</script>

<style>
  .form-checkbox:checked {
    background-image: linear-gradient(to right, #07377e, #35a5c2);
    border-color: transparent;
  }
  .form-checkbox:checked::before {
    content: '\2713';
    display: block;
    text-align: center;
    color: white;
    font-size: 0.8em;
    line-height: 1.2em;
  }
</style>
